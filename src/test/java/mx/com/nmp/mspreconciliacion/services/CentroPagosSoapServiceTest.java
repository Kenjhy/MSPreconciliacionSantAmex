package mx.com.nmp.mspreconciliacion.services;

import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.reset;
import static org.mockito.Mockito.when;

import java.util.List;

import org.joda.time.Instant;
import org.junit.FixMethodOrder;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.runners.MethodSorters;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.ws.client.core.WebServiceTemplate;

import mx.com.nmp.mspreconciliacion.MSPreConciliacionApplication;
import mx.com.nmp.mspreconciliacion.centropagos.consumer.CentroPagosSoapService;
import mx.com.nmp.mspreconciliacion.centropagos.consumer.soap.Transacciones;
import mx.com.nmp.mspreconciliacion.centropagos.consumer.soap.TransaccionesResponse;
import mx.com.nmp.mspreconciliacion.exceptions.PagoException;
import mx.com.nmp.mspreconciliacion.model.dto.MovCorresponsalDTO;
import mx.com.nmp.mspreconciliacion.model.enums.CorresponsalEnum;

@SpringBootTest(classes = MSPreConciliacionApplication.class, properties="")
@AutoConfigureMockMvc
@FixMethodOrder(MethodSorters.NAME_ASCENDING)
class CentroPagosSoapServiceTest {

	@Autowired
    @Qualifier("centroPagosSoapService")
	private CentroPagosSoapService wSCentroPagos;
	
    @Mock
    private WebServiceTemplate webServiceTemplate;
	
    @BeforeEach
    void setUp(){
        reset(webServiceTemplate);
        wSCentroPagos.setWebServiceTemplate(webServiceTemplate);
    }
	
	@Test
	void consultarTransaccionesTest() throws PagoException {
		TransaccionesResponse respuesta = new TransaccionesResponse();
		String resultado= "";
		respuesta.setOut(resultado);
		
		when(webServiceTemplate.marshalSendAndReceive(anyString(),any(Transacciones.class))).thenReturn(respuesta);
		List<MovCorresponsalDTO>  lista= wSCentroPagos.consultarTransacciones(CorresponsalEnum.SANTANDER, Instant.now().toDate());
		Assertions.assertNotNull(lista);
	}
}
